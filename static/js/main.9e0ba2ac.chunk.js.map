{"version":3,"sources":["components/Navbar.js","components/Planet.js","components/Planets.js","components/Person.js","components/People.js","App.js","index.js"],"names":["Navbar","setPage","onClick","Planet","planet","className","name","population","terrain","fetchPlanets","a","queryKey","page","fetch","res","json","Planets","useState","useQuery","keepPreviousData","onSuccess","console","log","onError","data","isSuccess","isLoading","isError","error","isPreviousData","message","prev","Math","max","disabled","next","results","map","key","Person","person","gender","birth_year","fetchPeople","People","App","queryClient","QueryClient","ReactDOM","render","StrictMode","client","initialIsOpen","document","getElementById"],"mappings":"0NAWeA,EATA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,6BACE,4BAAQC,QAAS,kBAAMD,EAAQ,aAA/B,WACA,4BAAQC,QAAS,kBAAMD,EAAQ,YAA/B,Y,iCCMSE,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAOE,MACZ,2CAAiBF,EAAOG,YACxB,wCAAcH,EAAOI,WCJvBC,EAAY,uCAAG,mCAAAC,EAAA,6DAASC,EAAT,EAASA,SAAT,cACIA,EADJ,QACJC,EADI,cAEDC,MAAM,sCAAD,OAAuCD,IAF3C,cAEbE,EAFa,yBAGVA,EAAIC,QAHM,2CAAH,sDAoDDC,EA/CC,WAAO,IAAD,EACIC,mBAAS,GADb,mBACbL,EADa,KACPX,EADO,OAGlBiB,mBAAS,CAAC,UAAWN,GAAOH,EAAc,CACxCU,kBAAkB,EAGlBC,UAAW,WACTC,QAAQC,IAAI,uBAEdC,QAAS,WACPF,QAAQC,IAAI,oBATVE,EAFY,EAEZA,KAAMC,EAFM,EAENA,UAAWC,EAFL,EAEKA,UAAWC,EAFhB,EAEgBA,QAASC,EAFzB,EAEyBA,MAAOC,EAFhC,EAEgCA,eAYpD,OACE,6BACE,uCACCH,GAAa,+CACbC,GAAW,6BAAMC,EAAME,SACvBL,GACC,oCACE,yBAAKpB,UAAU,cACb,4BACEH,QAAS,kBAAMD,GAAQ,SAAC8B,GAAD,OAAUC,KAAKC,IAAIF,EAAO,EAAG,OACpDG,SAAmB,IAATtB,GAFZ,YAMA,8BAAOA,GACP,4BACEsB,SAAUL,IAAmBL,IAASA,EAAKW,KAC3CjC,QAAS,kBACPD,GAAQ,SAAC8B,GAAD,OAAYP,GAASA,EAAKW,KAAcJ,EAAO,EAAdA,OAH7C,SASDP,EAAKY,QAAQC,KAAI,SAACjC,GAAD,OAChB,kBAAC,EAAD,CAAQA,OAAQA,EAAQkC,IAAKlC,EAAOE,aCnCjCiC,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKnC,UAAU,QACb,4BAAKmC,EAAOlC,MACZ,uCAAakC,EAAOC,QACpB,2CAAiBD,EAAOE,cCJ1BC,EAAW,uCAAG,4BAAAjC,EAAA,sEACAG,MAAM,gCADN,cACZC,EADY,yBAETA,EAAIC,QAFK,2CAAH,qDAsBA6B,EAlBA,WAAO,IAAD,EACoC1B,mBACrD,SACAyB,GAFMnB,EADW,EACXA,KAAMC,EADK,EACLA,UAAWC,EADN,EACMA,UAAWC,EADjB,EACiBA,QAASC,EAD1B,EAC0BA,MAI7C,OACE,6BACE,sCACCF,GAAa,+CACbC,GAAW,6BAAMC,EAAME,SACvBL,GACCD,EAAKY,QAAQC,KAAI,SAACG,GAAD,OACf,kBAAC,EAAD,CAAQA,OAAQA,EAAQF,IAAKE,EAAOlC,YCC/BuC,MAff,WAAgB,IAAD,EACS5B,mBAAS,WADlB,mBACRL,EADQ,KACFX,EADE,KAGb,OACE,yBAAKI,UAAU,OACb,8CACA,kBAAC,EAAD,CAAQJ,QAASA,IACjB,yBAAKI,UAAU,WACH,YAATO,GAAsB,kBAAC,EAAD,MACb,WAATA,GAAqB,kBAAC,EAAD,S,QCPxBkC,EAAc,IAAIC,cACxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,sBAAD,CAAqBC,OAAQL,GAC3B,kBAAC,EAAD,MACA,kBAAC,qBAAD,CAAoBM,eAAe,MAGvCC,SAASC,eAAe,W","file":"static/js/main.9e0ba2ac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = ({ setPage }) => {\n  return (\n    <nav>\n      <button onClick={() => setPage(\"planets\")}>Planets</button>\n      <button onClick={() => setPage(\"people\")}>People</button>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Planet = ({ planet }) => {\n  return (\n    <div className=\"card\">\n      <h3>{planet.name}</h3>\n      <p>Population - {planet.population}</p>\n      <p>Terrain - {planet.terrain}</p>\n    </div>\n  );\n};\n\nexport default Planet;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Planet from \"./Planet\";\nlet fetchPlanets = async ({ queryKey }) => {\n  const [_key, page] = queryKey; //[\"planets\", page]\n  let res = await fetch(`https://swapi.dev/api/planets?page=${page}`);\n  return res.json();\n};\nconst Planets = () => {\n  const [page, setPage] = useState(1);\n  const { data, isSuccess, isLoading, isError, error, isPreviousData } =\n    useQuery([\"planets\", page], fetchPlanets, {\n      keepPreviousData: true, //should use on pagination because keep previous fetched data on page when it's requesting for new page queries\n      // staleTime: 3000,\n      // cacheTime: 3,\n      onSuccess: function () {\n        console.log(\"data retreive fine\");\n      },\n      onError: function () {\n        console.log(\"getting error\");\n      },\n    });\n  return (\n    <div>\n      <h2>Planets</h2>\n      {isLoading && <div>loading ......</div>}\n      {isError && <div>{error.message}</div>}\n      {isSuccess && (\n        <>\n          <div className=\"pagination\">\n            <button\n              onClick={() => setPage((prev) => Math.max(prev - 1, 1))}\n              disabled={page === 1}\n            >\n              Previous\n            </button>\n            <span>{page}</span>\n            <button\n              disabled={isPreviousData || !data || !data.next}\n              onClick={() =>\n                setPage((prev) => (!data || !data.next ? prev : prev + 1))\n              }\n            >\n              Next\n            </button>\n          </div>\n          {data.results.map((planet) => (\n            <Planet planet={planet} key={planet.name} />\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Planets;\n","import React from \"react\";\n\nconst Person = ({ person }) => {\n  return (\n    <div className=\"card\">\n      <h3>{person.name}</h3>\n      <p>Gender - {person.gender}</p>\n      <p>Birth year - {person.birth_year}</p>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport Person from \"./Person\";\nlet fetchPeople = async () => {\n  let res = await fetch(\"https://swapi.dev/api/people\");\n  return res.json();\n};\nconst People = () => {\n  const { data, isSuccess, isLoading, isError, error } = useQuery(\n    \"people\",\n    fetchPeople\n  );\n  return (\n    <div>\n      <h2>People</h2>\n      {isLoading && <div>loading ......</div>}\n      {isError && <div>{error.message}</div>}\n      {isSuccess &&\n        data.results.map((person) => (\n          <Person person={person} key={person.name} />\n        ))}\n    </div>\n  );\n};\n\nexport default People;\n","import React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Planets from \"./components/Planets\";\nimport People from \"./components/People\";\n\nfunction App() {\n  let [page, setPage] = useState(\"planets\");\n\n  return (\n    <div className=\"App\">\n      <h1>Star Wars Info</h1>\n      <Navbar setPage={setPage} />\n      <div className=\"content\">\n        {page === \"planets\" && <Planets />}\n        {page === \"people\" && <People />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}